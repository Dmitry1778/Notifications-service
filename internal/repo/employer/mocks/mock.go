// Code generated by MockGen. DO NOT EDIT.
// Source: employer.go

// Package mock_employer is a generated GoMock package.
package mock_employer

import (
	context "context"
	domain "notify/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockuserStorage is a mock of userStorage interface.
type MockuserStorage struct {
	ctrl     *gomock.Controller
	recorder *MockuserStorageMockRecorder
}

// MockuserStorageMockRecorder is the mock recorder for MockuserStorage.
type MockuserStorageMockRecorder struct {
	mock *MockuserStorage
}

// NewMockuserStorage creates a new mock instance.
func NewMockuserStorage(ctrl *gomock.Controller) *MockuserStorage {
	mock := &MockuserStorage{ctrl: ctrl}
	mock.recorder = &MockuserStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserStorage) EXPECT() *MockuserStorageMockRecorder {
	return m.recorder
}

// GetAllEmployee mocks base method.
func (m *MockuserStorage) GetAllEmployee(ctx context.Context) (*[]domain.ResponseEmployee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEmployee", ctx)
	ret0, _ := ret[0].(*[]domain.ResponseEmployee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEmployee indicates an expected call of GetAllEmployee.
func (mr *MockuserStorageMockRecorder) GetAllEmployee(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEmployee", reflect.TypeOf((*MockuserStorage)(nil).GetAllEmployee), ctx)
}

// GetEmployeeID mocks base method.
func (m *MockuserStorage) GetEmployeeID(ctx context.Context, id int) (*domain.ResponseEmployee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeeID", ctx, id)
	ret0, _ := ret[0].(*domain.ResponseEmployee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeeID indicates an expected call of GetEmployeeID.
func (mr *MockuserStorageMockRecorder) GetEmployeeID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeeID", reflect.TypeOf((*MockuserStorage)(nil).GetEmployeeID), ctx, id)
}

// GetPublisherList mocks base method.
func (m *MockuserStorage) GetPublisherList(ctx context.Context, id int) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublisherList", ctx, id)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublisherList indicates an expected call of GetPublisherList.
func (mr *MockuserStorageMockRecorder) GetPublisherList(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublisherList", reflect.TypeOf((*MockuserStorage)(nil).GetPublisherList), ctx, id)
}

// Register mocks base method.
func (m *MockuserStorage) Register(ctx context.Context, emp domain.Employee) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, emp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockuserStorageMockRecorder) Register(ctx, emp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockuserStorage)(nil).Register), ctx, emp)
}

// Subscribe mocks base method.
func (m *MockuserStorage) Subscribe(ctx context.Context, sub, pub int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, sub, pub)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockuserStorageMockRecorder) Subscribe(ctx, sub, pub interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockuserStorage)(nil).Subscribe), ctx, sub, pub)
}

// Unsubscribe mocks base method.
func (m *MockuserStorage) Unsubscribe(ctx context.Context, sub, pub int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", ctx, sub, pub)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockuserStorageMockRecorder) Unsubscribe(ctx, sub, pub interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockuserStorage)(nil).Unsubscribe), ctx, sub, pub)
}
